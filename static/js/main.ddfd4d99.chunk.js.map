{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","InitialConfig","AntdConfig","configs","settings","addRuleLabel","addGroupLabel","delGroupLabel","notLabel","conjunctions","AND","label","OR","fields","name","type","valueSources","preferWidgets","qty","fieldSettings","min","price","max","color","listValues","value","title","is_promotion","operators","initialQueryValue","id","QbUtils","uuid","children1","properties","field","operator","valueSrc","valueType","useState","checkTree","loadTree","tree","setTree","config","setConfig","className","Helmet","onChange","immutableTree","jsonTree","getTree","console","log","renderBuilder","props","RenderBuilder","style","padding","RenderResult","JSON","stringify","queryString","sqlFormat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddfd4d99.chunk.js","sourcesContent":["import \"./App.scss\";\nimport \"react-awesome-query-builder/lib/css/styles.css\";\n// import \"react-awesome-query-builder/lib/css/compact_styles.css\"; //optional, for more compact styles\n\nimport { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  Query,\n  Builder,\n  Utils as QbUtils,\n  BuilderProps,\n  ImmutableTree,\n  Config,\n  JsonGroup,\n} from \"react-awesome-query-builder\";\nimport AntdConfig from \"react-awesome-query-builder/lib/config/antd\";\n// import _ from \"lodash\";\n\nexport default function App() {\n  const InitialConfig = AntdConfig;\n\n  const configs: Config = {\n    ...InitialConfig,\n\n    // change settings label\n    settings: {\n      ...InitialConfig.settings,\n      addRuleLabel: \"Add Rule\",\n      addGroupLabel: \"Add Group\",\n      delGroupLabel: \"Delete Group\",\n      notLabel: \"NOT\",\n    },\n\n    // change conjunctions label\n    conjunctions: {\n      ...InitialConfig.conjunctions,\n      AND: { ...InitialConfig.conjunctions.AND, label: \"AND\" },\n      OR: { ...InitialConfig.conjunctions.OR, label: \"OR\" },\n    },\n\n    // set all the query builder's field within fields object below\n    fields: {\n      name: {\n        label: \"Name\",\n        type: \"text\",\n        valueSources: [\"value\"],\n        preferWidgets: [\"text\"],\n      },\n      qty: {\n        label: \"Qty\",\n        type: \"number\",\n        fieldSettings: {\n          min: 0,\n        },\n        valueSources: [\"value\"],\n        preferWidgets: [\"number\"],\n      },\n      price: {\n        label: \"Price\",\n        type: \"number\",\n        valueSources: [\"value\"],\n        fieldSettings: {\n          min: 10,\n          max: 100,\n        },\n        preferWidgets: [\"slider\", \"rangeslider\"],\n      },\n      color: {\n        label: \"Color\",\n        type: \"select\",\n        valueSources: [\"value\"],\n        fieldSettings: {\n          listValues: [\n            { value: \"yellow\", title: \"Yellow\" },\n            { value: \"green\", title: \"Green\" },\n            { value: \"orange\", title: \"Orange\" },\n          ],\n        },\n      },\n      is_promotion: {\n        label: \"Promo?\",\n        type: \"boolean\",\n        operators: [\"equal\"],\n        valueSources: [\"value\"],\n      },\n    },\n  };\n\n  // set initial value for empty query builder\n  const initialQueryValue: JsonGroup = {\n    id: QbUtils.uuid(),\n    type: \"group\",\n    children1: {\n      \"b99ab988-0123-4456-b89a-b17956f89e96\": {\n        type: \"rule\",\n        properties: {\n          field: null,\n          operator: null,\n          value: [],\n          valueSrc: [],\n          valueType: [],\n        },\n      },\n    },\n  };\n\n  const [tree, setTree] = useState<ImmutableTree>(\n    QbUtils.checkTree(QbUtils.loadTree(initialQueryValue), configs)\n  );\n  const [config, setConfig] = useState<Config>(configs);\n\n  const onChange = (immutableTree: ImmutableTree, config: Config) => {\n    // Tip: for better performance you can apply `throttle` - see `examples/demo`\n    // this.setState({tree: immutableTree, config: config});\n    setTree(immutableTree);\n    setConfig(config);\n\n    // TODO find out what the heck throttle is?! currently have no clue\n    // _.throttle(() => {\n    //   setTree(immutableTree);\n    //   setConfig(config);\n    // }, 100);\n\n    const jsonTree = QbUtils.getTree(immutableTree);\n    console.log(jsonTree);\n    // `jsonTree` can be saved to backend, and later loaded to `initialQueryValue`\n  };\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <title>Demo Query Builder</title>\n      </Helmet>\n\n      <div className=\"App-body\">\n        <div className=\"awesome-query-builder\">\n          <Query\n            {...config}\n            value={tree}\n            onChange={(tree, config) => onChange(tree, config)}\n            renderBuilder={(props) => <RenderBuilder {...props} />}\n          />\n\n          <RenderResult immutableTree={tree} config={config} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst RenderBuilder = (props: BuilderProps) => (\n  <div className=\"query-builder-container\" style={{ padding: 10 }}>\n    <div className=\"query-builder\">\n      <Builder {...props} />\n    </div>\n  </div>\n);\n\nconst RenderResult = ({\n  immutableTree,\n  config,\n}: {\n  immutableTree: ImmutableTree;\n  config: Config;\n}) => (\n  <div className=\"query-builder-result\">\n    <div>\n      Query string:{\" \"}\n      <pre>{JSON.stringify(QbUtils.queryString(immutableTree, config))}</pre>\n    </div>\n    <div>\n      SQL where:{\" \"}\n      <pre>{JSON.stringify(QbUtils.sqlFormat(immutableTree, config))}</pre>\n    </div>\n    {/* <div>\n      JsonLogic:{\" \"}\n      <pre>{JSON.stringify(QbUtils.jsonLogicFormat(immutableTree, config))}</pre>\n    </div>\n    <div>\n      Tree: <pre>{JSON.stringify(QbUtils.getTree(immutableTree))}</pre>\n    </div> */}\n  </div>\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}